[{"/home/lazzy/tic-tac-toe-react/src/index.js":"1","/home/lazzy/tic-tac-toe-react/src/App.js":"2","/home/lazzy/tic-tac-toe-react/src/reportWebVitals.js":"3","/home/lazzy/tic-tac-toe-react/src/components/index.js":"4","/home/lazzy/tic-tac-toe-react/src/components/Board.jsx":"5","/home/lazzy/tic-tac-toe-react/src/components/Square.jsx":"6"},{"size":525,"mtime":1608893667720,"results":"7","hashOfConfig":"8"},{"size":2637,"mtime":1609174699121,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1608891331406,"results":"10","hashOfConfig":"8"},{"size":83,"mtime":1609171006622,"results":"11","hashOfConfig":"8"},{"size":673,"mtime":1609173580549,"results":"12","hashOfConfig":"8"},{"size":532,"mtime":1609174176705,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"uv0a29",{"filePath":"17","messages":"18","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"16"},"/home/lazzy/tic-tac-toe-react/src/index.js",[],["29","30"],"/home/lazzy/tic-tac-toe-react/src/App.js",["31","32","33","34","35"],"import { useState } from \"react\";\nimport { Row, Container, Col, Button } from \"react-bootstrap\";\nimport { MdRefresh } from 'react-icons/md'\nimport { Board } from './components'\nimport './App.css'\n\nconst setInitSquare = () => [['', '', ''], ['', '', ''], ['', '', '']]\n\nfunction App() {\n  const [squares, setSquares] = useState(setInitSquare());\n  const [turn, setTurn] = useState('X');\n  const [winner, setWinner] = useState('')\n\n  let setSquare = (i, j) => {\n    if (winner == '' && squares[i][j] == '') {\n      squares[i][j] = turn\n      setSquares([...squares])\n\n      if (checkForWin(flatten())) {\n        setWinner(turn)\n      } else {\n        if (checkForDraw(flatten())) {\n          setWinner('Draw')\n        } else {\n          setTurn(turn == 'X' ? 'O' : 'X')\n        }\n      }\n    }\n  }\n\n  const flatten = () => squares.reduce((acc, cur) => [...acc, ...cur], [])\n\n  const checkThree = (a, b, c) => {\n    if (!a || !b || !c) return false\n    return a === b && b === c\n  }\n\n  function checkForWin(flatGrid) {\n    const [nw, n, ne, w, c, e, sw, s, se] = flatGrid\n\n    return (\n      checkThree(nw, n, ne) ||\n      checkThree(w, c, e) ||\n      checkThree(sw, s, se) ||\n      checkThree(nw, w, sw) ||\n      checkThree(n, c, s) ||\n      checkThree(ne, e, se) ||\n      checkThree(nw, c, se) ||\n      checkThree(ne, c, sw)\n    )\n  }\n\n  function checkForDraw(flatGrid) {\n    return (\n      flatGrid.filter(Boolean).length === flatGrid.length\n    )\n  }\n\n  let resetBoard = () => {\n    console.log(squares, setInitSquare())\n    setSquares([...setInitSquare()])\n    setWinner('')\n    setTurn('X')\n    console.log(squares)\n  }\n\n  return (\n    <Container fluid className=\"bg-dark text-light p-5\" style={{ height: '100vh' }}>\n      <Row className=\"justify-content-center\">\n        <h1>TIC-TAC-TOE</h1>\n      </Row>\n\n      <Container>\n        <Row className=\"justify-content-center align-items-center my-3\">\n          <h2 className=\"text text-info\">{turn + \"'s Turn\"}</h2>\n        </Row>\n      </Container>\n      <Row className=\"justify-content-center align-items-center my-5\">\n        <Board squares={squares} turn={turn} setSquare={setSquare} />\n      </Row>\n      <Row className=\"justify-content-center align-items-center text-success\">\n        <Button variant=\"outline-danger\" onClick={resetBoard}><MdRefresh size=\"1.5em\" /> Reset</Button>\n      </Row>\n      {winner ? <Row className=\"justify-content-center align-items-center text-success my-2\">\n        {winner == 'Draw' ? <h2 className=\"text-info\">It's a Draw!</h2> : <h2 className=\"text-success\">{winner} Won!!</h2>}\n      </Row> : ''}\n\n    </Container>\n  );\n}\n\n\n\n\n\nexport default App;\n","/home/lazzy/tic-tac-toe-react/src/reportWebVitals.js",[],"/home/lazzy/tic-tac-toe-react/src/components/index.js",[],"/home/lazzy/tic-tac-toe-react/src/components/Board.jsx",[],"/home/lazzy/tic-tac-toe-react/src/components/Square.jsx",["36"],"import { Badge } from \"react-bootstrap\";\n\nimport { FaTimes, FaRegCircle } from \"react-icons/fa\";\n\nfunction Square(props) {\n  return (\n    <Badge\n      variant=\"dark\"\n      className=\"square\"\n      onClick={() => props.setSquare(props.keyi, props.keyj)}\n    >\n      <span>\n        {props.value ? (\n          props.value == \"X\" ? (\n            <FaTimes size=\"100px\" />\n          ) : (\n            <FaRegCircle size=\"100px\" />\n          )\n        ) : (\n          \"\"\n        )}\n      </span>\n    </Badge>\n  );\n}\n\nexport default Square;\n",{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":2,"column":26,"nodeType":"43","messageId":"44","endLine":2,"endColumn":29},{"ruleId":"45","severity":1,"message":"46","line":15,"column":16,"nodeType":"47","messageId":"48","endLine":15,"endColumn":18},{"ruleId":"45","severity":1,"message":"46","line":15,"column":39,"nodeType":"47","messageId":"48","endLine":15,"endColumn":41},{"ruleId":"45","severity":1,"message":"46","line":25,"column":24,"nodeType":"47","messageId":"48","endLine":25,"endColumn":26},{"ruleId":"45","severity":1,"message":"46","line":85,"column":17,"nodeType":"47","messageId":"48","endLine":85,"endColumn":19},{"ruleId":"45","severity":1,"message":"46","line":14,"column":23,"nodeType":"47","messageId":"48","endLine":14,"endColumn":25},"no-native-reassign",["49"],"no-negated-in-lhs",["50"],"no-unused-vars","'Col' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]